#! /usr/bin/bash

# This script installs Netgen/Ngsolve for parallel processing using openmpi
# assuming that Python3 and Cmake3 are already installed

module load openmpi-2.0/gcc-8.2.0
module load intel

export BASEDIR=$HOME/NGparallel
mkdir -p $BASEDIR
cd $BASEDIR && git clone https://github.com/NGSolve/ngsolve.git ngsolve
cd $BASEDIR/ngsolve
git submodule update --init --recursive
git submodule sync --recursive
git submodule update --init --recursive

mkdir $BASEDIR/build 
cd $BASEDIR/build
cmake \
  -DCMAKE_INSTALL_PREFIX=$BASEDIR \
  -DCMAKE_BUILD_TYPE=Release \
  -DUSE_MPI=ON \
  -DUSE_GUI=OFF \
  -DUSE_MUMPS=ON \
  -DUSE_HYPRE=ON \
  -DUSE_MKL=ON \
  -DMKL_ROOT=/opt/intel/mkl \
  -DMKL_SDL=OFF \
  $BASEDIR/ngsolve
make -j20
make install

# The first time installing, it's necessary to edit the file ngspy,
# appending :/usr/lib64/libgomp.so.1 to the PRELOAD PATH
cd $BASEDIR/bin

# After editing, the file ngspy should look like this, but with your
# username in the place of <username>
cat ngspy
# #! /usr/bin/bash
# LD_PRELOAD=$LD_PRELOAD:/act/openmpi-2.0/gcc-8.2.0/lib/libmpi.so:/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/mkl/lib/intel64/libmkl_gnu_thread.so:/opt/intel/mkl/lib/intel64/libmkl_intel_lp64.so:/opt/intel/mkl/lib/intel64/libmkl_blacs_openmpi_lp64.so:/usr/lib64/libgomp.so.1 /home/<username>/common/install/bin/python3 $*

# Test that everything works
# $ cd $BASEDIR/ngsolve/py_tutorials/mpi/poisson_output
# $ mpirun -np 5 ngspy mpi_poisson.py
